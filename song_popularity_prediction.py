# -*- coding: utf-8 -*-
"""Song_popularity_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13O9m_vJhA9f0EcIRdukMa8ZEut44ToIV
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.neural_network import MLPClassifier

df = pd.read_csv('MusicDataset.csv')
df.head()

df.shape

df.isnull().sum()

drop_list = ['artist_location', 'artist_latitude', 'artist_longitude','artist_name', 'release', 'title']
train = df.drop(drop_list, axis=1)

# Filling up the null values:

train["song_hotttnesss"] = train["song_hotttnesss"].fillna(train["song_hotttnesss"].mean())
train["artist_familiarity"] = train["artist_familiarity"].fillna(train["artist_familiarity"].median())
train.isnull().sum()

train['bbhot'].value_counts()

#graph distribution of an attribute of songs that are hot
def freq(col):
   g = sns.kdeplot(train[col][(train["bbhot"] == 1)], color="Blue", shade = True)
   g.set_xlabel(col)
   g.set_ylabel("Frequency")
   g = g.legend(["1"])
   plt.show()

freq("tempo")

freq("duration")

freq("start_of_fade_out")

freq("end_of_fade_in")

freq("mode_confidence")

freq("time_signature_confidence")

freq("song_hotttnesss")

train1 = train.drop(['artist_id', 'bbhot'], axis = 1)

train2 = train1.drop(['end_of_fade_in', 'key', 'key_confidence', 'mode', 'mode_confidence', 'year'], axis = 1)

train2.head()

train2.columns

Y = train['bbhot'].copy(deep=True)
Y.shape

X_train, X_test, y_train, y_test = train_test_split(train2, Y, test_size=0.3, random_state=0)

clf1 = MLPClassifier(hidden_layer_sizes=(200,150,50), max_iter=200,activation = 'relu',solver='adam',random_state=1)
clf1.fit(X_train, y_train)

print(clf1.score(X_train, y_train))

#Predicting y for X_val
y_pred = clf1.predict(X_test)
clf1.score(X_test, y_test)

# Model evaluation
print(classification_report(y_test, y_pred))

# Plotting graph for MLPClassifier

loss_values = clf1.loss_curve_
plt.plot(loss_values)
plt.show()

import pickle

pickle.dump(clf1, open('music-popularity-model.pkl', 'wb'))